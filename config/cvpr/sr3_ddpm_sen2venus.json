{
    "name": "sr3_ddpm_sen2venus",
    "phase": "train", // train or val
    "gpu_ids": [
        2,3,4,5,6,7
    ],
    "path": { //set the path
        "log": "experiments/cvpr/sr3_ddpm_sen2venus/logs",
        "tb_logger": "experiments/cvpr/sr3_ddpm_sen2venus/tb_logger",
        "results": "experiments/cvpr/sr3_ddpm_sen2venus/results",
        "checkpoint": "experiments/cvpr/sr3_ddpm_sen2venus/checkpoint",
        "resume_state": null //"experiments/sr3_ddpm_baseline/checkpoint/last"
    },
    "datasets": {
	"output_size": 128,
        "train": {
            "name": "Sen2Venus",
	    "dataroot": "/data/piperw/data/sen2venus/",
            "datatype": "sen2venus", //img for naip reconstruction & LSUN, s2 for conditioning on just s2, s2_and_downsampled_naip for both
            "batch_size": 32,
            "num_workers": 8,
            "use_shuffle": true
        },
        "val": {
            "name": "Sen2Venus",
            "dataroot": "/data/piperw/data/sen2venus/",
            "datatype": "sen2venus", //img for naip reconstruction & LSUN, s2 for conditioning on just s2, s2_and_downsampled_naip for both
	    "use_shuffle": false
        }
    },
    "model": {
        "which_model_G": "sr3", // use the ddpm or sr3 network structure
        "finetune_norm": false,
        "unet": {
            "in_channel": 6,
            "out_channel": 3,
            "inner_channel": 64,
            "channel_multiplier": [
                1,
                2,
                4,
                8,
                8
            ],
            "attn_res": [
                16
            ],
            "res_blocks": 2,
            "dropout": 0.2
        },
        "beta_schedule": { // use munual beta_schedule for acceleration
            "train": {
                "schedule": "linear",
                "n_timestep": 2000,
                "linear_start": 1e-6,
                "linear_end": 1e-2
            },
            "val": {
                "schedule": "linear",
                "n_timestep": 2000,
                "linear_start": 1e-6,
                "linear_end": 1e-2
            }
        },
        "diffusion": {
	    "image_size": 256,
            "channels": 3, //sample channel
            "conditional": true, // unconditional generation or unconditional generation(super_resolution)
            "is_ddim_sampling": false
	}
    },
    "train": {
        "n_iter": 10000000,
        "val_freq": 2e4,
        "save_checkpoint_freq": 2e4,
        "print_freq": 2000,
        "optimizer": {
            "type": "adam",
            "lr": 1e-4
        }
    },
    "wandb": {
        "project": "multisat"
    }
}
